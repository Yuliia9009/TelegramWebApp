using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TelegramWebAPI.Models.Chat;
using TelegramWebAPI.Models.Requests;
using TelegramWebAPI.Services.Interfaces;
using System.Security.Claims;

namespace TelegramWebAPI.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/chats")]
    public class ChatController : ControllerBase
    {
        private readonly IChatService _chatService;

        public ChatController(IChatService chatService)
        {
            _chatService = chatService;
        }

        [HttpPost]
        public async Task<IActionResult> CreateChat([FromBody] CreateChatRequest request)
        {
            if (request.Participants == null || !request.Participants.Any())
                return BadRequest("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");

            var chat = new Chat
            {
                Name = request.Name,
                Participants = request.Participants,
                IsGroup = request.IsGroup
            };

            var created = await _chatService.CreateChatAsync(chat);
            return Ok(created);
        }

        [HttpPost("{chatId}/messages")]
        public async Task<IActionResult> SendMessage(string chatId, [FromBody] SendMessageRequest request)
        {
            Console.WriteLine($"üëâ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {chatId}");

            if (string.IsNullOrWhiteSpace(chatId))
                return BadRequest("chatId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.");

            if (string.IsNullOrWhiteSpace(request.Text))
                return BadRequest("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");

            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId)) return Unauthorized();

            Console.WriteLine($"üìù –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {userId}, —Ç–µ–∫—Å—Ç: {request.Text}");

            var message = new Message
            {
                Id = Guid.NewGuid().ToString(),
                ChatId = chatId,
                SenderId = userId,
                Text = request.Text,
                SentAt = DateTime.UtcNow
            };

            // ‚ùó –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            var sent = await _chatService.SendMessageAsync(message);

            return Ok(sent);
        }

        [HttpGet("{chatId}/messages")]
        public async Task<IActionResult> GetMessages(string chatId)
        {
            Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞: {chatId}");

            if (string.IsNullOrWhiteSpace(chatId))
                return BadRequest("chatId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.");

            var messages = await _chatService.GetMessagesAsync(chatId);
            return Ok(messages.OrderBy(m => m.SentAt));
        }

        [HttpGet("my")]
        public async Task<IActionResult> GetMyChats()
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId)) return Unauthorized();

            Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {userId}");

            var chats = await _chatService.GetChatsForUserAsync(userId);
            return Ok(chats);
        }

        [HttpPut("edit-message/{chatId}/{messageId}")]
        public async Task<IActionResult> EditMessage(string chatId, string messageId, [FromBody] string newText)
        {
            if (string.IsNullOrWhiteSpace(newText))
                return BadRequest("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");

            var updatedMessage = await _chatService.UpdateMessageAsync(chatId, messageId, newText);
            return Ok(updatedMessage);
        }

        [HttpPost("private")]
        public async Task<IActionResult> CreatePrivateChat([FromBody] CreatePrivateChatRequest request)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId)) return Unauthorized();

            Console.WriteLine($"üîê –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: {userId} ‚Üî {request.ParticipantId}");

            var existingChat = await _chatService.GetOrCreatePrivateChatAsync(userId, request.ParticipantId);
            if (existingChat != null)
                return Ok(existingChat);

            var chat = new Chat
            {
                IsGroup = false,
                Participants = new List<string> { userId, request.ParticipantId },
                Name = "–õ–∏—á–Ω—ã–π —á–∞—Ç",
                CreatedBy = userId
            };

            var created = await _chatService.CreateChatAsync(chat);
            return Ok(created);
        }

        [HttpGet("find-or-create/{userId}")]
        public async Task<IActionResult> FindOrCreateChat(string userId)
        {
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(currentUserId)) return Unauthorized();

            Console.WriteLine($"üîé –ü–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –º–µ–∂–¥—É {currentUserId} –∏ {userId}");

            var chat = await _chatService.GetOrCreateChatAsync(currentUserId, userId);
            return Ok(chat);
        }

        // –ò–∑–º–µ–Ω—ë–Ω –º–∞—Ä—à—Ä—É—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        [HttpGet("by-id/{id}")]
        public async Task<IActionResult> GetChatById(string id)
        {
            var chat = await _chatService.GetChatByIdAsync(id);
            if (chat == null)
                return NotFound();

            return Ok(chat);
        }
    }
}